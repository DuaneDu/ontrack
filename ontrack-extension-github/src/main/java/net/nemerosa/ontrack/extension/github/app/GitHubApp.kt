package net.nemerosa.ontrack.extension.github.app

import io.jsonwebtoken.Jwts
import io.jsonwebtoken.security.Keys
import net.nemerosa.ontrack.extension.github.app.client.GitHubAppClient
import java.time.LocalDateTime
import java.time.ZoneId
import java.util.*
import javax.crypto.SecretKey


class GitHubApp(
    private val gitHubAppClient: GitHubAppClient
) {

    companion object {
        /**
         * Generates a JWT suitable for calling the GitHub App API.
         */
        fun generateJWT(appId: String, appPrivateKey: String): String {
            val now = LocalDateTime.now()
            // issued at current time, 60 seconds in the past to allow for clock drift
            val issuedAt = Date.from(now.minusSeconds(60).atZone(ZoneId.systemDefault()).toInstant())
            // JWT expiration time (10 minute maximum)
            val expiresAt = Date.from(now.plusMinutes(10).atZone(ZoneId.systemDefault()).toInstant())

            // Encoding the key for JWT
            val key: SecretKey = Keys.hmacShaKeyFor(appPrivateKey.toByteArray())

            // Encoding the JWT
            return Jwts.builder()
                .setIssuer(appId)
                .setIssuedAt(issuedAt)
                .setExpiration(expiresAt)
                .signWith(key)
                .compact()
        }
    }

    /**
     * Gets the installation to use for the client.
     *
     * @param jwt JWT generated by the [generateJWT] method
     * @param appId ID of the GitHub App
     * @param appInstallationAccountName Optional account name of the installation, used to differentiate app installations when need be
     * @return ID of the app installation to use
     */
    fun getInstallation(jwt: String, appId: String, appInstallationAccountName: String?): String {
        // Gets the list of installations for the app
        val installations = gitHubAppClient.getAppInstallations(jwt)
        // If no installation
        return if (installations.isEmpty()) {
            throw GitHubAppNoInstallationException(appId)
        }
        // Only one installation
        else if (installations.size == 1) {
            val installation = installations.first()
            if (appInstallationAccountName != null && installation.account.login != appInstallationAccountName) {
                throw GitHubAppNoInstallationForAccountException(appId, appInstallationAccountName)
            } else {
                installation.id
            }
        }
        // Several installations
        else {
            if (appInstallationAccountName != null) {
                val installation = installations.find {
                    it.account.login == appInstallationAccountName
                }
                installation?.id ?: throw GitHubAppNoInstallationForAccountException(appId, appInstallationAccountName)
            } else {
                throw GitHubAppSeveralInstallationsException(appId)
            }
        }
    }

}