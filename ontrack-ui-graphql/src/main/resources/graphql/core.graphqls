type Query {
    """Basic test service"""
    ping: String
}

type Mutation {
    """Basic test service"""
    ping: String
}

# =================================================================================
# Payload errors (duplicate from the programmatic ones)
# =================================================================================

"Representation of an error."
type PayloadUserError {
    "Programmatic code to be used by client. Usually the FQCN of the corresponding exception."
    exception: String!
    "Additional information about the location of this error."
    location: String
    "The error message"
    message: String!
}

"Interface implemented by all mutation payloads"
interface PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}

# =================================================================================
# Scalars
# =================================================================================

scalar JSON

# =================================================================================
# ACL
# =================================================================================

"""A named authorization"""
type Authorization {
    """Name of the authorization scope"""
    name: String!
    """Action to authorize"""
    action: String!
    """Authorized?"""
    authorized: Boolean!
}

extend type Query {
    """Getting a list of authorizations for the authenticated user"""
    authorizations: [Authorization!]!
}

# =================================================================================
# Dashboards
# =================================================================================

type WidgetInstance {
    uuid: String!
    key: String!
    config: JSON!
}

type Dashboard {
    key: String!
    name: String!
    builtIn: Boolean!
    layoutKey: String!
    widgets: [WidgetInstance!]!
}

extend type Query {
    """Gets the dashboard for a given context"""
    dashboardByContext(key: String!, id: String!): Dashboard!
}

extend type Mutation {
    """Updates the configuration of a widget for a given dashboard"""
    updateWidgetConfig(input: UpdateWidgetConfigInput!): UpdateWidgetConfigPayload
}

input UpdateWidgetConfigInput {
    dashboardKey: String!
    widgetUuid: String!
    config: JSON!
}

type UpdateWidgetConfigPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError!]
    """Updated widget"""
    widget: WidgetInstance
}
