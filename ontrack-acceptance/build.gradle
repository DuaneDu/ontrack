import com.bmuschko.gradle.docker.tasks.image.*

plugins {
    id "groovy"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

ext {
    seleniumVersion = '3.11.0'
}

dependencies {
    testCompile project(':ontrack-client')
    testCompile project(':ontrack-dsl')
    testCompile project(':ontrack-dsl-shell')
    testCompile project(':ontrack-test-utils')
    testCompile 'org.codehaus.groovy:groovy'
    testCompile 'org.codehaus.groovy:groovy-xml'
    testCompile 'org.springframework.boot:spring-boot-starter'

    testCompile 'org.influxdb:influxdb-java'

    testCompile "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.seleniumhq.selenium' && details.requested.name != 'htmlunit-driver') {
            details.useVersion seleniumVersion
        }
    }
}

/**
 * Packaging
 */

bootJar {
    bootInf {
        from sourceSets.test.output
        into "classes"
    }
    classpath configurations.testRuntime
    mainClassName = 'net.nemerosa.ontrack.acceptance.boot.Start'
    classifier = 'app'
}

task normaliseJar {
    dependsOn bootJar
    doFirst {
        project.mkdir "${buildDir}/libs"
        // Used for local testing only
        ant.copy file: bootJar.outputs.files.singleFile, tofile: "${buildDir}/libs/ontrack-acceptance.jar"
    }
}

task acceptanceDockerPrepareEnv(type: Copy) {
    dependsOn normaliseJar
    from "${buildDir}/libs/ontrack-acceptance.jar"
    into "${projectDir}/src/main/docker"
}

assemble.dependsOn normaliseJar

task dockerBuild(type: DockerBuildImage) {
    dependsOn acceptanceDockerPrepareEnv
    inputDir = file("src/main/docker")
    tags.add("nemerosa/ontrack-acceptance:$version")
    tags.add("nemerosa/ontrack-acceptance:latest")
}

rootProject.tasks.publicationPackage {
    from bootJar
}

/**
 * Local test definitions
 */

ext {
    ontrackUrl = 'http://localhost:8080'
    ontrackJvmOptions = project.hasProperty('ontrackJvmOptions') ? project.ontrackJvmOptions : '-Xmx256m'
}

acceptanceTest {
    outputs.upToDateWhen { false }  // Always run tests
    systemProperty 'ontrack.url', ontrackUrl
    systemProperty 'ontrack.implicitWait', project.hasProperty('ontrackImplicitWait') ? ontrackImplicitWait : 5
}

// Disable unit tests (none in this project)
test {
    enabled = false
}

// Disable normal JAR creation

jar {
    enabled = false
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            // Clears all previous artifacts defined in root `build.gradle`
            artifacts = [bootJar]
        }
    }
}
