---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ontrack.fullname" . }}
  namespace: {{ template "ontrack.namespace" . }}
  labels:
    "app.kubernetes.io/name": '{{ template "ontrack.name" .}}'
    "helm.sh/chart": "{{ .Chart.Name }}-{{ .Chart.Version }}"
    "app.kubernetes.io/managed-by": "{{ .Release.Service }}"
    "app.kubernetes.io/instance": "{{ .Release.Name }}"
    "app.kubernetes.io/component": "{{ .Values.app.component }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      "app.kubernetes.io/instance": "{{ .Release.Name }}"
      "app.kubernetes.io/component": "{{ .Values.app.component }}"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": '{{ template "ontrack.name" .}}'
        "helm.sh/chart": "{{ .Chart.Name }}-{{ .Chart.Version }}"
        "app.kubernetes.io/managed-by": "{{ .Release.Service }}"
        "app.kubernetes.io/instance": "{{ .Release.Name }}"
        "app.kubernetes.io/component": "{{ .Values.app.component }}"
    spec:
      volumes:
        - name: {{ .Values.app.name }}-{{ .Values.environment }}-tmp-storage
          emptyDir: {}
      containers:
        - name: {{ .Values.app.name }}
          image: {{ .Values.container.image }}:{{ .Values.container.tag }}
          env:
            - name: SPRING_DATASOURCE_URL
              value: {{ .Values.container.env.spring.datasource.url  }}
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "ontrack.fullname" . }}
                  key: ontrack-spring-datasource-username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "ontrack.fullname" . }}
                  key: ontrack-spring-datasource-password
          volumeMounts:
            - mountPath: /var/ontrack/data
              name: {{ .Values.app.name }}-{{ .Values.environment }}-tmp-storage
          ports:
            - containerPort: {{ .Values.container.port }}
              name: {{ .Values.app.name }}-port
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.container.healthProbesPath }}
              port: {{ .Values.container.port }}
            initialDelaySeconds: {{ .Values.container.healthProbeLivenessInitialDelay }}
            periodSeconds: {{ .Values.container.healthProbeLivenessPeriodSeconds }}
            timeoutSeconds: {{ .Values.container.healthProbesLivenessTimeout }}
            failureThreshold: {{ .Values.container.healthProbeLivenessFailureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.container.healthProbesPath }}
              port: {{ .Values.container.port }}
            initialDelaySeconds: {{ .Values.container.healthProbeReadinessInitialDelay }}
            periodSeconds: {{ .Values.container.healthProbeReadinessPeriodSeconds }}
            timeoutSeconds: {{ .Values.container.healthProbesReadinessTimeout }}
            failureThreshold: {{ .Values.container.healthProbeReadinessFailureThreshold }}
